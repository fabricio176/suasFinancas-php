CREATE DATABASE suasfinancas;
USE suasfinancas;

-- Tabela para armazenar informações dos usuários
CREATE TABLE Usuarios (
    UserID INT PRIMARY KEY AUTO_INCREMENT,
    Nome VARCHAR(100) NOT NULL,
    Email VARCHAR(100) UNIQUE NOT NULL,
    Senha VARCHAR(255) NOT NULL,
    NivelAcesso ENUM('admin', 'usuario') NOT NULL DEFAULT 'usuario'
);

-- Tabela para armazenar informações de despesas
CREATE TABLE Despesas (
    DespesaID INT PRIMARY KEY AUTO_INCREMENT,
    UserID INT NOT NULL,
    Descricao VARCHAR(255) NOT NULL,
    Valor DECIMAL(10,2) NOT NULL,
    Categoria VARCHAR(50) NOT NULL,
    DataDespesa DATE NOT NULL,
    Recorrente BOOLEAN DEFAULT FALSE,
    StatusDespesa ENUM('Paga', 'Não Paga') NOT NULL DEFAULT 'Não Paga',
    ValorMinimo DECIMAL(10, 2) DEFAULT 0,
    FOREIGN KEY (UserID) REFERENCES Usuarios(UserID)
);

-- Tabela para armazenar informações de relatórios
CREATE TABLE Relatorios (
    RelatorioID INT PRIMARY KEY AUTO_INCREMENT,
    UserID INT NOT NULL,
    DataGeracao DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (UserID) REFERENCES Usuarios(UserID)
);

-- Tabela para armazenar informações de metas financeiras
CREATE TABLE Metas (
    MetaID INT PRIMARY KEY AUTO_INCREMENT,
    UserID INT NOT NULL,
    Descricao TEXT NOT NULL,
    ValorAlvo DECIMAL(15,2) NOT NULL,
    Prazo DATE NOT NULL,
    Tipo ENUM('economia', 'investimento', 'outro') NOT NULL,
    DataInicio DATE NOT NULL DEFAULT CURRENT_DATE,
    FOREIGN KEY (UserID) REFERENCES Usuarios(UserID)
);

-- Tabela para armazenar informações de pagamentos
CREATE TABLE Pagamentos (
    PagamentoID INT PRIMARY KEY AUTO_INCREMENT,
    DespesaID INT NOT NULL,
    UserID INT NOT NULL,
    Valor DECIMAL(10,2) NOT NULL,
    DataPagamento DATE NOT NULL,
    MetodoPagamento VARCHAR(50) NOT NULL,
    FOREIGN KEY (DespesaID) REFERENCES Despesas(DespesaID),
    FOREIGN KEY (UserID) REFERENCES Usuarios(UserID)
);

-- Tabela para armazenar limites de gastos por categoria
CREATE TABLE LimitesGastos (
    LimiteID INT PRIMARY KEY AUTO_INCREMENT,
    UserID INT NOT NULL,
    Categoria VARCHAR(50) NOT NULL,
    Limite DECIMAL(10,2) NOT NULL,
    FOREIGN KEY (UserID) REFERENCES Usuarios(UserID)
);

-- Tabela para armazenar regras de categorização automática
CREATE TABLE RegrasCategorizacao (
    RegraID INT PRIMARY KEY AUTO_INCREMENT,
    UserID INT NOT NULL,
    Padrao VARCHAR(255) NOT NULL,
    Categoria VARCHAR(50) NOT NULL,
    FOREIGN KEY (UserID) REFERENCES Usuarios(UserID)
);

-- Criando a trigger
DELIMITER //

CREATE TRIGGER trg_atualizar_status_despesa AFTER INSERT ON Pagamentos
FOR EACH ROW
BEGIN
    -- Atualiza o status da despesa para 'Paga' quando um pagamento é registrado
    UPDATE Despesas
    SET StatusDespesa = 'Paga'
    WHERE DespesaID = NEW.DespesaID;
END//

DELIMITER ;
